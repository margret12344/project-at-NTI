{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"elapsed":1079,"status":"error","timestamp":1753865300037,"user":{"displayName":"omar","userId":"08220305646548675422"},"user_tz":480},"id":"pO70VB1RqFN-","outputId":"9db38d1a-a0d2-40ff-eec5-b79de203f1c1"},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/content/train.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-1-3662804333.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mdf_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/train.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdf_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'test.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/train.csv'"]}],"source":["import numpy as np\n","import pandas as pd\n","\n","df_train=pd.read_csv('/content/train.csv')\n","df_test=pd.read_csv('test.csv')\n","df_train.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NGBnCx8VrhX8"},"outputs":[],"source":["print(df_train.shape)\n","print(df_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dRwtR_hKsvJp"},"outputs":[],"source":["print(df_train.isnull().sum())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"edCO9L9_9sUL"},"outputs":[],"source":["print('\\n',df_test.isnull().sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WbR_ZBEA81gN"},"outputs":[],"source":["df_train.drop('id',axis=1,inplace=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1YkNNRkOtj5M"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","numerical_columns = df_train.select_dtypes(include=['float64', 'int64']).columns\n","\n","\n","plt.figure(figsize=(20, 15))\n","\n","\n","for i, column in enumerate(numerical_columns):\n","    plt.subplot(3, 3, i+1)\n","    sns.histplot(df_train[column], kde=True)\n","    plt.title(f'Distribution of {column}')\n","    plt.xlabel(column)\n","    plt.ylabel('Frequency')\n","\n","plt.tight_layout()\n","plt.show()\n"]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","label_encoder = LabelEncoder()\n","df_train['Stage_fear'] = label_encoder.fit_transform(df_train['Stage_fear'])\n","df_test['Stage_fear'] = label_encoder.transform(df_test['Stage_fear'])\n","\n","df_train['Drained_after_socializing'] = label_encoder.fit_transform(df_train['Drained_after_socializing'])\n","df_test['Drained_after_socializing'] = label_encoder.transform(df_test['Drained_after_socializing'])\n","\n","df_train['Personality']=label_encoder.fit_transform(df_train['Personality'])\n","\n","\n","\n"],"metadata":{"id":"iKahwu9KThDA"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zDXVmhGj3o_6"},"outputs":[],"source":["import pandas as pd\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer\n","\n","\n","columns_with_missing_values = [\n","    'Time_spent_Alone',\n","    'Going_outside',\n","    'Post_frequency',\n","    'Social_event_attendance',\n","    'Friends_circle_size',\n","    'Stage_fear',\n","    'Drained_after_socializing'\n","]\n","\n","\n","imputer = IterativeImputer(random_state=42)\n","\n","df_train[columns_with_missing_values] = imputer.fit_transform(df_train[columns_with_missing_values])\n","\n","\n","print(df_train.isnull().sum())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ab-A9suw8-ZZ"},"outputs":[],"source":["import pandas as pd\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer\n","\n","columns_with_missing_values = [\n","    'Time_spent_Alone',\n","    'Going_outside',\n","    'Post_frequency',\n","    'Social_event_attendance',\n","    'Friends_circle_size',\n","    'Stage_fear',\n","    'Drained_after_socializing'\n","]\n","\n","imputer = IterativeImputer(random_state=42)\n","\n","df_test[columns_with_missing_values] = imputer.fit_transform(df_test[columns_with_missing_values])\n","\n","print(df_test.isnull().sum())"]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(data=df_train[numerical_columns])\n","plt.title('Box Plot to detect Outliers')\n","plt.show()\n","\n","\n"],"metadata":{"id":"_8fiNGl9FzN_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def cap_outliers_iqr(df):\n","\n","    Q1 = df.quantile(0.25)\n","    Q3 = df.quantile(0.75)\n","\n","    IQR = Q3 - Q1\n","\n","\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","\n","\n","    df_capped = df.copy()\n","    df_capped = df_capped.apply(lambda x: x.clip(lower=lower_bound[x.name], upper=upper_bound[x.name]) if x.name in df.columns else x)\n","\n","    return df_capped\n","\n","df_train[numerical_columns] = cap_outliers_iqr(df_train[numerical_columns])\n","df_test[numerical_columns] = cap_outliers_iqr(df_test[numerical_columns])"],"metadata":{"id":"cvzxg9piFzeJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(data=df_train[numerical_columns])\n","plt.title('Box Plot to detect Outliers')\n","plt.show()\n","\n","\n"],"metadata":{"id":"4-UefFX1Gnel"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZBes8C9j5mv-"},"outputs":[],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","\n","correlation_matrix = df_train.corr()\n","plt.figure(figsize=(10, 8))\n","sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n","plt.title('Correlation Matrix')\n","plt.show()\n"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","\n","\n","\n","plt.figure(figsize=(20, 15))\n","\n","\n","for i, column in enumerate(numerical_columns):\n","    plt.subplot(3, 3, i+1)\n","    sns.histplot(df_train[column], kde=True)\n","    plt.title(f'Distribution of {column}')\n","    plt.xlabel(column)\n","    plt.ylabel('Frequency')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"yrxK3ocZ5kJa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QE0Dkb07z-e8"},"source":[]},{"cell_type":"code","source":["X_train = df_train.drop('Personality', axis=1)\n","y_train = df_train['Personality']\n","X_test = df_test.drop('id', axis=1)\n"],"metadata":{"id":"WBaaM0FfGsyV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])\n","X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])"],"metadata":{"id":"H1PoL3A164bX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(X_train.shape)\n"],"metadata":{"id":"nvg_thAIqu6U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.model_selection import train_test_split\n","\n","\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n","\n","model = Sequential()\n","model.add(Dense(64, input_dim=7, activation='relu'))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(16,activation='relu'))\n","model.add(Dense(8, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","\n","early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","\n","model.fit(\n","    X_train, y_train,\n","    validation_data=(X_val, y_val),\n","    epochs=50,\n","    batch_size=32,\n","    callbacks=[early_stop],\n","    verbose=1\n",")"],"metadata":{"id":"gXwM7l8K8BMb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","y_pred = model.predict(X_test)\n","\n","y_pred_binary = (y_pred > 0.5).astype(int).flatten()\n"],"metadata":{"id":"jwNR4NZJFey8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_labels = label_encoder.inverse_transform(y_pred_binary)\n","\n","\n","submission = pd.DataFrame({\n","    'id': df_test['id'],\n","    'Personality': y_pred_labels\n","})\n","\n","submission.to_csv('Neural_Networkcur.csv', index=False)"],"metadata":{"id":"i8rEOipYFr88"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1nfmZTVJp6G8bjlTAmVRJNLoxFgAwfBEH","timestamp":1753863409918},{"file_id":"1YuAMRDnhHu3cehMU5q69rtnRemOQlRBk","timestamp":1753850004053}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}