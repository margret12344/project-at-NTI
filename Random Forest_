{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hWxjfttqradfXx-DcC7zaF05pNAs3yzw","timestamp":1753803404849}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"vv5aCh5WH0de"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import accuracy_score\n","\n","\n","df_train = pd.read_csv('train.csv')\n","df_test = pd.read_csv('test.csv')\n","\n","\n","\n"]},{"cell_type":"code","source":["print(\"\\n First 5 rows:\")\n","print(df_train.head())"],"metadata":{"id":"_T7vByluazNF","executionInfo":{"status":"ok","timestamp":1753835889080,"user_tz":480,"elapsed":12,"user":{"displayName":"omar","userId":"08220305646548675422"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6a6f41a7-71e4-4b78-95cc-dbf2e61de6d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," First 5 rows:\n","   id  Time_spent_Alone Stage_fear  Social_event_attendance  Going_outside  \\\n","0   0               0.0         No                      6.0            4.0   \n","1   1               1.0         No                      7.0            3.0   \n","2   2               6.0        Yes                      1.0            0.0   \n","3   3               3.0         No                      7.0            3.0   \n","4   4               1.0         No                      4.0            4.0   \n","\n","  Drained_after_socializing  Friends_circle_size  Post_frequency Personality  \n","0                        No                 15.0             5.0   Extrovert  \n","1                        No                 10.0             8.0   Extrovert  \n","2                       NaN                  3.0             0.0   Introvert  \n","3                        No                 11.0             5.0   Extrovert  \n","4                        No                 13.0             NaN   Extrovert  \n"]}]},{"cell_type":"code","source":["print(\"\\n Number of duplicate rows: \",df_train.duplicated().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zCCGywe9ygqK","executionInfo":{"status":"ok","timestamp":1753835889101,"user_tz":480,"elapsed":20,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"5fbb4866-983f-4c4a-e505-fdf52e88a9db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Number of duplicate rows:  0\n"]}]},{"cell_type":"code","source":["print(df_test.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o8JdXUVg2a6S","executionInfo":{"status":"ok","timestamp":1753837336753,"user_tz":480,"elapsed":21,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"d94844a7-0b8b-4830-9b62-301358578370"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['id', 'Time_spent_Alone', 'Stage_fear', 'Social_event_attendance',\n","       'Going_outside', 'Drained_after_socializing', 'Friends_circle_size',\n","       'Post_frequency'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["print(\"\\n Numerical statistics:\")\n","print(df_train.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MnbiELZ2a2iX","executionInfo":{"status":"ok","timestamp":1753835889161,"user_tz":480,"elapsed":58,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"7ff228e4-b5e0-446c-cc1d-ae25cfef8c1d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Numerical statistics:\n","                 id  Time_spent_Alone  Social_event_attendance  Going_outside  \\\n","count  18524.000000      17334.000000             17344.000000   17058.000000   \n","mean    9261.500000          3.137764                 5.265106       4.044319   \n","std     5347.562529          3.003786                 2.753359       2.062580   \n","min        0.000000          0.000000                 0.000000       0.000000   \n","25%     4630.750000          1.000000                 3.000000       3.000000   \n","50%     9261.500000          2.000000                 5.000000       4.000000   \n","75%    13892.250000          4.000000                 8.000000       6.000000   \n","max    18523.000000         11.000000                10.000000       7.000000   \n","\n","       Friends_circle_size  Post_frequency  \n","count         17470.000000    17260.000000  \n","mean              7.996737        4.982097  \n","std               4.223484        2.879139  \n","min               0.000000        0.000000  \n","25%               5.000000        3.000000  \n","50%               8.000000        5.000000  \n","75%              12.000000        7.000000  \n","max              15.000000       10.000000  \n"]}]},{"cell_type":"code","source":["print(\"\\n Distribution of empty values:\")\n","print(df_train.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Twl0utwrynnd","executionInfo":{"status":"ok","timestamp":1753835889162,"user_tz":480,"elapsed":34,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"9c57f820-070f-4180-9425-f23789d219f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Distribution of empty values:\n","id                              0\n","Time_spent_Alone             1190\n","Stage_fear                   1893\n","Social_event_attendance      1180\n","Going_outside                1466\n","Drained_after_socializing    1149\n","Friends_circle_size          1054\n","Post_frequency               1264\n","Personality                     0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["print(\"\\n Categorical distribution of Personality:\")\n","print(df_train['Personality'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RqePUDa4a7bT","executionInfo":{"status":"ok","timestamp":1753835889162,"user_tz":480,"elapsed":13,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"89e177d9-a424-4c8d-8c53-3887c714fa7b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Categorical distribution of Personality:\n","Personality\n","Extrovert    13699\n","Introvert     4825\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["\n","df_train.drop('id', axis=1, inplace=True)"],"metadata":{"id":"tgrqgFudy8gX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","\n","numerical_columns = df_train.select_dtypes(include=['float64', 'int64']).columns\n","\n","label_encoder = LabelEncoder()\n","df_train['Stage_fear'] = label_encoder.fit_transform(df_train['Stage_fear'])\n","df_test['Stage_fear'] = label_encoder.transform(df_test['Stage_fear'])\n","\n","df_train['Drained_after_socializing'] = label_encoder.fit_transform(df_train['Drained_after_socializing'])\n","df_test['Drained_after_socializing'] = label_encoder.transform(df_test['Drained_after_socializing'])\n","\n","df_train['Personality']=label_encoder.fit_transform(df_train['Personality'])\n","\n","\n"],"metadata":{"id":"27_iIz8ky-aX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer\n","\n","\n","columns_with_missing_values = [\n","    'Time_spent_Alone',\n","    'Going_outside',\n","    'Post_frequency',\n","    'Social_event_attendance',\n","    'Friends_circle_size',\n","    'Stage_fear',\n","    'Drained_after_socializing'\n","]\n","\n","\n","imputer = IterativeImputer(random_state=42)\n","\n","df_train[columns_with_missing_values] = imputer.fit_transform(df_train[columns_with_missing_values])\n","\n","\n","print(df_train.isnull().sum())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dx6YivZMzAGp","executionInfo":{"status":"ok","timestamp":1753835889546,"user_tz":480,"elapsed":379,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"31b33d08-797b-4149-9088-94f8da33238b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Time_spent_Alone             0\n","Stage_fear                   0\n","Social_event_attendance      0\n","Going_outside                0\n","Drained_after_socializing    0\n","Friends_circle_size          0\n","Post_frequency               0\n","Personality                  0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer\n","\n","columns_with_missing_values = [\n","    'Time_spent_Alone',\n","    'Going_outside',\n","    'Post_frequency',\n","    'Social_event_attendance',\n","    'Friends_circle_size',\n","    'Stage_fear',\n","    'Drained_after_socializing'\n","]\n","\n","imputer = IterativeImputer(random_state=42)\n","\n","df_test[columns_with_missing_values] = imputer.fit_transform(df_test[columns_with_missing_values])\n","\n","print(df_test.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2x6yM-sgzCMi","executionInfo":{"status":"ok","timestamp":1753835889865,"user_tz":480,"elapsed":316,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"c959185e-9a06-489a-83e6-5035d4f00ed5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["id                           0\n","Time_spent_Alone             0\n","Stage_fear                   0\n","Social_event_attendance      0\n","Going_outside                0\n","Drained_after_socializing    0\n","Friends_circle_size          0\n","Post_frequency               0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(data=df_train[numerical_columns])\n","plt.title('Box Plot to detect Outliers')\n","plt.show()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"v9tTJXoibD4y","executionInfo":{"status":"ok","timestamp":1753835890936,"user_tz":480,"elapsed":1068,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"75b7d011-de99-4f6b-9cae-28c3c8586308"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def winsorize_column(df, column, lower_percentile=0.10, upper_percentile=0.90):\n","    lower = df[column].quantile(lower_percentile)\n","    upper = df[column].quantile(upper_percentile)\n","    df[column] = np.clip(df[column], lower, upper)\n","    return df\n","\n","\n","df_train = winsorize_column(df_train, 'Time_spent_Alone')\n","df_test = winsorize_column(df_test,'Time_spent_Alone')\n"],"metadata":{"id":"uaoBPY92zNLb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10, 6))\n","sns.boxplot(data=df_train[numerical_columns])\n","plt.title('Box Plot to detect Outliers')\n","plt.show()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"Ba9PbPx8zQnJ","executionInfo":{"status":"ok","timestamp":1753835891854,"user_tz":480,"elapsed":915,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"ca35e7e2-dd09-4615-a6d1-cb93c040b761"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["X_train = df_train.drop('Personality', axis=1)\n","y_train = df_train['Personality']\n","X_test = df_test.drop('id', axis=1)\n"],"metadata":{"id":"F99WFgJJzTIO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","from skopt import BayesSearchCV\n","from skopt.space import Integer, Categorical\n","\n","\n","param_space = {\n","    'n_estimators': Integer(100, 500),\n","    'max_depth': Integer(3, 15),\n","    'min_samples_split': Integer(2, 20),\n","    'min_samples_leaf': Integer(1, 20),\n","    'criterion': Categorical(['gini', 'entropy']),\n","    'max_features': Categorical(['sqrt', 'log2', None])\n","}\n","\n","opt = BayesSearchCV(\n","    RandomForestClassifier(random_state=42),\n","    param_space,\n","    n_iter=50,\n","    random_state=42,\n","    n_jobs=-1,\n","    cv=5\n",")\n","\n","opt.fit(X_train, y_train)\n"],"metadata":{"id":"V_8bFD4PbIG0","colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"status":"ok","timestamp":1753836769405,"user_tz":480,"elapsed":839013,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"26c558dc-b27c-41fa-df4d-ef8a8b3662cc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["BayesSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n","              n_jobs=-1, random_state=42,\n","              search_spaces={'criterion': Categorical(categories=('gini', 'entropy'), prior=None),\n","                             'max_depth': Integer(low=3, high=15, prior='uniform', transform='normalize'),\n","                             'max_features': Categorical(categories=('sqrt', 'log2', None), prior=None),\n","                             'min_samples_leaf': Integer(low=1, high=20, prior='uniform', transform='normalize'),\n","                             'min_samples_split': Integer(low=2, high=20, prior='uniform', transform='normalize'),\n","                             'n_estimators': Integer(low=100, high=500, prior='uniform', transform='normalize')})"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BayesSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n","              n_jobs=-1, random_state=42,\n","              search_spaces={&#x27;criterion&#x27;: Categorical(categories=(&#x27;gini&#x27;, &#x27;entropy&#x27;), prior=None),\n","                             &#x27;max_depth&#x27;: Integer(low=3, high=15, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n","                             &#x27;max_features&#x27;: Categorical(categories=(&#x27;sqrt&#x27;, &#x27;log2&#x27;, None), prior=None),\n","                             &#x27;min_samples_leaf&#x27;: Integer(low=1, high=20, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n","                             &#x27;min_samples_split&#x27;: Integer(low=2, high=20, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n","                             &#x27;n_estimators&#x27;: Integer(low=100, high=500, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>BayesSearchCV</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>BayesSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n","              n_jobs=-1, random_state=42,\n","              search_spaces={&#x27;criterion&#x27;: Categorical(categories=(&#x27;gini&#x27;, &#x27;entropy&#x27;), prior=None),\n","                             &#x27;max_depth&#x27;: Integer(low=3, high=15, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n","                             &#x27;max_features&#x27;: Categorical(categories=(&#x27;sqrt&#x27;, &#x27;log2&#x27;, None), prior=None),\n","                             &#x27;min_samples_leaf&#x27;: Integer(low=1, high=20, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n","                             &#x27;min_samples_split&#x27;: Integer(low=2, high=20, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;),\n","                             &#x27;n_estimators&#x27;: Integer(low=100, high=500, prior=&#x27;uniform&#x27;, transform=&#x27;normalize&#x27;)})</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=9, min_samples_split=7,\n","                       n_estimators=217, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=9, min_samples_split=7,\n","                       n_estimators=217, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["y_pred = opt.predict(X_test)\n","y_pred_labels = label_encoder.inverse_transform(y_pred)\n"],"metadata":{"id":"gmzvMpnEbMjd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["submission = pd.DataFrame({\n","    'id': df_test['id'],\n","    'Personality': y_pred_labels\n","})\n","\n","submission.to_csv('RandomForest.csv', index=False)\n"],"metadata":{"id":"vctQuNw2bQWE"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ec16f090","executionInfo":{"status":"ok","timestamp":1753835927059,"user_tz":480,"elapsed":10365,"user":{"displayName":"omar","userId":"08220305646548675422"}},"outputId":"b46c6774-78f2-46da-c9b7-e16dd14a52d7"},"source":["!pip install scikit-optimize"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikit-optimize\n","  Downloading scikit_optimize-0.10.2-py2.py3-none-any.whl.metadata (9.7 kB)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (1.5.1)\n","Collecting pyaml>=16.9 (from scikit-optimize)\n","  Downloading pyaml-25.7.0-py3-none-any.whl.metadata (12 kB)\n","Requirement already satisfied: numpy>=1.20.3 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (2.0.2)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (1.16.0)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (1.6.1)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (25.0)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from pyaml>=16.9->scikit-optimize) (6.0.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0.0->scikit-optimize) (3.6.0)\n","Downloading scikit_optimize-0.10.2-py2.py3-none-any.whl (107 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.8/107.8 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pyaml-25.7.0-py3-none-any.whl (26 kB)\n","Installing collected packages: pyaml, scikit-optimize\n","Successfully installed pyaml-25.7.0 scikit-optimize-0.10.2\n"]}]}]}